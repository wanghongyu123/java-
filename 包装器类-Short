参考JDK1.8源代码

package java.lang;

public final class Short extends Number implements Comparable<Short> {
  
 //常量拥有short类型的最小值
 public static final short  MIN_VALUE = -32768;
 
 //常量拥有short类型的最大值
 public static final short  MAX_VALUE = 32767;
 
 //类的实例代表原始的short类型
 @SuppressWarnings("unchecked")
 public static final Class<Short>    TYPE = (Class<Short>) Class.getPrimitiveClass("short");
 
 //返回String对象根据特定的short值
 public static String toString(short s) {
  return Intrger.toString((int)s, 10);
 }
 
 //返回short值根据特定进制的字符串
 public static short parseShort(String s, int radix)
        throws NumberFormatException {
        int i = Integer.parseInt(s, radix);
        if (i < MIN_VALUE || i > MAX_VALUE)
            throw new NumberFormatException(
                "Value out of range. Value:\"" + s + "\" Radix:" + radix);
        return (short)i;
    }
 
 //返回short值根据特定的字符串
 public static short parseShort(String s) throws NumberFormatException {
        return parseShort(s, 10);
    }
 
 //返回Short对象根据特定基数的字符串
 public static Short valueOf(String s, int radix)
        throws NumberFormatException {
        return valueOf(parseShort(s, radix));
    }
    
 //返回Short对象根据特定的字符串
 public static Short valueOf(String s) throws NumberFormatException {
        return valueOf(s, 10);
    }

 //short缓存区
 private static class ShortCache {
        private ShortCache(){}

        static final Short cache[] = new Short[-(-128) + 127 + 1];

        static {
            for(int i = 0; i < cache.length; i++)
                cache[i] = new Short((short)(i - 128));
        }
    }
    
 //返回Short实例根据特定short值
  public static Short valueOf(short s) {
        final int offset = 128;
        int sAsInt = s;
        if (sAsInt >= -128 && sAsInt <= 127) { // must cache
            return ShortCache.cache[sAsInt + offset];
        }
        return new Short(s);
    }
 
 //对特定进制字符串进行解码为Short对象，16进制 前导0x,0X,#。8进制 前导0
   public static Short decode(String nm) throws NumberFormatException {
        int i = Integer.decode(nm);
        if (i < MIN_VALUE || i > MAX_VALUE)
            throw new NumberFormatException(
                    "Value " + i + " out of range from input " + nm);
        return valueOf((short)i);
    }
  
  //Short对象的值
  private final short value;
  
  //构造Short对象根据特定short值
  public Short(short value) {
        this.value = value;
    }
  
  //构造Short对象根据特定String值
  public Short(String s) throws NumberFormatException {
        this.value = parseShort(s, 10);
    }

  //返回对象的byte值
  public byte byteValue() {
        return (byte)value;
    }
  
  //返回对象的short值
  public short shortValue() {
        return  value;
    }
   
  //返回对象的int值
  public int intValue() {
        return (int)value;
    }
  //返回对象的long值
  public long longValue() {
        return (long)value;
    }
  //返回对象的float值
  public float floatValue() {
        return (float)value;
    }  
  
  //返回对象的double值
  public double doubleValue() {
        return (double)value;
    }
   
  //将对象的值转变为字符串
  public String toString() {
        return Integer.toString((int)value);
    }
  
  //返回对象的哈希码
   @Override
    public int hashCode() {
        return Short.hashCode(value);
    }
  
  //返回特定short值的哈希码
  public static int hashCode(short value) {
        return (int)value;
    }
  
  //俩对象判等
  public boolean equals(Object obj) {
        if (obj instanceof Short) {
            return value == ((Short)obj).shortValue();
        }
        return false;
    }
  
  //两对象比较
  public int compareTo(Short anotherShort) {
        return compare(this.value, anotherShort.value);
    }
  
  //两short值比较
  public static int compare(short x, short y) {
        return x - y;
    }
  
  //bit数代表short类型的二进制形式
  public static final int SIZE = 16;
  
  //字节数代表short类型的二进制形式
  public static final int BYTES = SIZE / Byte.SIZE;
  
  //返回反转指定的二进制补码表示的字节顺序而获得的值 short值。 
  public static short reverseBytes(short i) {
        return (short) (((i & 0xFF00) >> 8) | (i << 8));
    }
  
  //返回特定short值的无符号整数
  public static int toUnsignedInt(short x) {
        return ((int) x) & 0xffff;
    }
    
  //返回特定short值的无符号长整数
  public static long toUnsignedLong(short x) {
        return ((long) x) & 0xffffL;
    }
    
  /** use serialVersionUID from JDK 1.1. for interoperability */
    private static final long serialVersionUID = 7515723908773894738L;
    
 
  
}
